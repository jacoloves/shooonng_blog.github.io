---
title: Greedy Low
---

アルゴ式の貪欲法を使う問題を全て解いたのでここにメモする。   

## その１
[1円玉と5円玉](https://algo-method.com/tasks/359)

除算して余剰を求めて足すだけで達成できた。   

```haskell
main = do
    n <- readLn :: IO Int

    let res = n `div` 5
    let res2 = n `mod` 5

    print $ res + res2
```

## その2
[お菓子 1](https://algo-method.com/tasks/362)

nが0になるまでloop内の処理を回す。   

```haskell
module Main where

main = do
    n <- readLn :: IO Int
    print $ loop 0 n
  where
    loop cnt n | n == 1 = cnt + 1
               | even n = loop (cnt + 1) (n `div` 2)
               | otherwise = loop (cnt + 1) (n - 1)
```

## その3
[コイン問題](https://algo-method.com/tasks/360)

ここからいまいち書き方がわからなくなってくる。

```haskell
module Main where

main = do
    n <- readLn :: IO Int
    a <- map read . words <$> getLine :: IO [Int]
    print . solve n $ zip [50,10,5,1] a

solve _ [] = 0
solve x ((y,c):ycs) = case r of
    0 -> count
    _ -> count + solve r ycs
    where
        count = min c $ div x y
        r = x - count * y
```

## その4
[荷物と箱](https://algo-method.com/tasks/361)

小さい順にソートをしてカウントを増やしていく感じ

```haskell
module Main where
import qualified Data.List as List

main = do 
    [n,m] <- map read . words <$> getLine :: IO [Int]
    xs <- map read . words <$> getLine :: IO [Int]
    ys <- map read . words <$> getLine :: IO [Int]

    let xs' = reverse $ List.sort xs
    let ys' = reverse $ List.sort ys

    print $ foldl (\cnt a -> 
        if length ys' <= cnt then cnt
        else if a <= ys' !! cnt then cnt + 1
        else cnt) 0 xs'
```

## その5
[お菓子 2](https://algo-method.com/tasks/364)

3で剰余ができるかそうでないなら-1をするかnが0になるまで繰り返す   
わかりやすい！！   

```haskell
module Main where

main = do
    n <- readLn :: IO Int

    let cnt = countSteps n 0
    print cnt

countSteps :: Int -> Int -> Int
countSteps 0 cnt = cnt
countSteps n cnt
    | n `mod` 3 == 0 = countSteps (n `div` 3) (cnt + 1)
    | otherwise = countSteps (n - 1) (cnt + 1)
```


## その6
[巡回セールスマン問題](https://algo-method.com/tasks/365)

replicateM nでn回回同じ処理を繰り返すって意味らしい

```haskell
module Main where

import Control.Monad
import Data.List
import Data.Ord

func :: [(Int, [Double])] -> [Double] -> Double -> Double
func [(_,ab)] o dis = dis + calcDist ab o
func ((i,ab):iab) o dis = 
    func iab' o (dis + cal)
    where
        iab'@((_,ab'):_) = sortOn (calcDist ab . snd) $ sort iab
        cal = calcDist ab ab'

calcDist :: [Double] -> [Double] -> Double
calcDist [a1, b1] [a2, b2] = sqrt $ (a1 - a2) ** 2 + (b1 - b2) ** 2

getDoubleList :: IO [Double]
getDoubleList = map read . words <$> getLine

main :: IO ()
main = do
    n <- readLn
    abs@(ab:_) <- replicateM n getDoubleList
    print $ func (zip [0..] abs) ab 0.0
```

## その7
[区間スケジューリング問題](https://algo-method.com/tasks/363)

終了時間が早い予定を優先的に見にいっている

```haskell
module Main where

import Control.Monad
import Data.List (sortOn)

main :: IO ()
main = do
    n <- readLn :: IO Int
    schedules <- replicateM n $ do
        [sa, ta] <- map read . words <$> getLine :: IO [Int]
        return (sa, ta)

    let ids = [0..n-1]
        sortedIds = sortOn(\i -> snd (schedules !! i)) ids

    let (_, result) = foldl (\(lastTime, count) i ->
            let (sa, ta) = schedules !! i in
                if sa < lastTime
                then (lastTime, count)
                else (ta, count + 1)
            ) (0, 0) sortedIds

    print result
```    
